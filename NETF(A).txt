
3 a)Bit Stuffing:

import java.util.*;
class BitStuff{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the bits:");
        String s=sc.nextLine();
        String res=bitstuffing(s);
        System.out.println("Original Data Stream:");
        System.out.println(s);
        System.out.println("Bitstuffed Data Stream:");
        System.out.println(res);
    }
    public static String bitstuffing(String s){
        StringBuilder sb=new StringBuilder();
        int count=0;
        for(int i=0;i<s.length();i++){
            char bit=s.charAt(i);
            sb.append(bit);
            if(bit=='1'){
                count++;
            }else{
                count=0;
            }
            if(count==5){
                sb.append('0');
                count=0;
            }
        }
        return sb.toString();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------
3 b)Character Stuffing:

import java.util.*;
class CharStuff{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number of Characters:");
        int n=sc.nextInt();
        System.out.println("Enter the characters:");
        String arr[]=new String[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.next();
        }
        for(int i=0;i<n;i++){
            if(arr[i].equals("dle")){
                arr[i]="dle dle";
            }
        }
        System.out.println("Transmitted message is: ");
        System.out.print("dle stx ");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.print("dle etx");
    }
}
==========================================================================================================================

5 a)ping
----

server

import java.io.*;
import java.net.*;

class pingserver {
    public static void main(String args[]) throws Exception {
        ServerSocket ss = new ServerSocket(5555);
        Socket s = ss.accept();
        int c = 0;
        
        // Wrap the input stream in a BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
        PrintStream out = new PrintStream(s.getOutputStream());

        while (c < 4) {
            // Read a line from the client
            String str = br.readLine();
            // Print the length of the received string
            out.println("Reply from " + InetAddress.getLocalHost() + "; Length " + str.length());
            c++;
        }
        
        s.close();
        ss.close();
    }
}

client

import java.io.*;
import java.net.*;

class pingclient {
    public static void main(String args[]) throws Exception {
        String str;
        int c = 0;
        long t1, t2;
        Socket s = new Socket("127.0.0.1", 5555);
        
        // Wrap the input stream in a BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
        PrintStream out = new PrintStream(s.getOutputStream());
        
        while (c < 4) {
            t1 = System.currentTimeMillis();
            str = "Welcome to network programming world";
            out.println(str);
            System.out.println(br.readLine());
            t2 = System.currentTimeMillis();
            System.out.println(";TTL=" + (t2 - t1) + "ms");
            c++;
        } 
        s.close(); 
    }
}

=========================================================================================================


5 )b)Traceroute

import java.io.*;
import java.net.*;
class TraceServer
{

public static void main(String args[])
{ try
{
String str;
System.out.print(" Enter the IP Address to be Traced : ");
BufferedReader buf1=new BufferedReader(new InputStreamReader(System.in));
String ip=buf1.readLine();
Runtime H=Runtime.getRuntime();
Process p=H.exec("tracert " + ip);
InputStream in=p.getInputStream();
BufferedReader buf2=new BufferedReader(new
InputStreamReader(in));
while((str=buf2.readLine())!=null)
{
System.out.println(" " + str);
}} catch(Exception e)
{
System.out.println(e.getMessage());
}}}

===================================================================================================

4)a)slide_window

sender

import java.net.*;
import java.io.*;
public class slidsender {
public static void main(String a[]) throws Exception {
ServerSocket ser = new ServerSocket(10);
Socket s = ser.accept();
BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
BufferedReader in1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
String sbuff[] = new String[8];
PrintStream p;
int sptr = 0, sws = 8, nf, ano, i;
String ch;
do {
p = new PrintStream(s.getOutputStream());
System.out.print("Enter the no. of frames : ");
nf = Integer.parseInt(in.readLine());
p.println(nf);
if (nf <= sws - 1) {
System.out.println("Enter " + nf + " Messages to be send\n");
for (i = 1; i <= nf; i++) {
sbuff[sptr] = in.readLine();
p.println(sbuff[sptr]);
sptr = ++sptr % 8;
}
sws -= nf;
System.out.print("Acknowledgment received");
ano = Integer.parseInt(in1.readLine());
System.out.println(" for " + ano + " frames");
sws += nf;
} else {
System.out.println("The no. of frames exceeds window size");
break; }

System.out.print("\nDo you want to send some more frames : ");
ch = in.readLine();
p.println(ch);
} while (ch.equals("yes"));
s.close();
} }


receiver

import java.net.*;
import java.io.*;
class slidreceiver {
public static void main(String a[]) throws Exception {
Socket s = new Socket(InetAddress.getLocalHost(), 10);
BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
PrintStream p = new PrintStream(s.getOutputStream());
int i = 0, rptr = -1, nf, rws = 8;
String rbuf[] = new String[8];
String ch;
System.out.println();
do {
nf = Integer.parseInt(in.readLine());
if (nf <= rws - 1) {
for (i = 1; i <= nf; i++) {
rptr = ++rptr % 8;
rbuf[rptr] = in.readLine();
System.out.println("The received Frame " + rptr + " is : " + rbuf[rptr]);
} rws -= nf;
System.out.println("\nAcknowledgment sent\n");
p.println(rptr + 1);
rws += nf;
} else
break;
ch = in.readLine();
} while (ch.equals("yes"));
} }

================================================================================================================================

4)b)stop_and_wait

receiver

import java.io.*;
import java.net.*;
public class Receiver {
ServerSocket receiver;
Socket connection = null;
ObjectOutputStream out;
ObjectInputStream in;
String packet, ack, data = "";
int i = 0, sequence = 0;
public Receiver() {
}
public void run() {
try {
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
receiver = new ServerSocket(2004, 10);
System.out.println("waiting for connection...");
connection = receiver.accept();
sequence = 0;
System.out.println("Connection established:");
out = new ObjectOutputStream(connection.getOutputStream());
out.flush();
in = new ObjectInputStream(connection.getInputStream());
out.writeObject("connected.");
do {
try {
packet = (String) in.readObject();
if (Integer.valueOf(packet.substring(0, 1)) == sequence) {

data += packet.substring(1);
sequence = (sequence == 0) ? 1 : 0;
System.out.println("\n\nreceiver >" + packet);
} else {
System.out.println("\n\nreceiver>" + packet + " duplicate data");
}
if (i < 3) {
out.writeObject(String.valueOf(sequence));
i++;
} else {
out.writeObject(String.valueOf((sequence + 1) % 2));
i = 0;
}
} catch (Exception e) {
}
} while (!packet.equals("end"));
System.out.println("Data received=" + data);
out.writeObject("connection ended.");
} catch (Exception e) {
} finally {
try {
in.close();
out.close();
receiver.close();
} catch (Exception e) {
}
}
}
public static void main(String args[]) {
Receiver s = new Receiver();
while (true) {
s.run();
}
}
}


sender

import java.io.*;
import java.net.*;
public class Sender{
Socket sender;
ObjectOutputStream out;
ObjectInputStream in;
String packet,ack,str, msg;
int n,i=0,sequence=0;
Sender(){}
public void run(){
try{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Waiting for Connection....");
sender = new Socket("localhost",2004);
sequence=0;
out=new ObjectOutputStream(sender.getOutputStream());
out.flush();
in=new ObjectInputStream(sender.getInputStream());
str=(String)in.readObject();
System.out.println("receiver > "+str);
System.out.println("Enter the data to send....");
packet=br.readLine();
n=packet.length();
do{
try{
if(i<n){
msg=String.valueOf(sequence);
msg=msg.concat(packet.substring(i,i+1));
}
else if(i==n){
msg="end";out.writeObject(msg);break;
}
out.writeObject(msg);

sequence=(sequence==0)?1:0;
out.flush();
System.out.println("data sent>"+msg);
ack=(String)in.readObject();
System.out.println("waiting for ack.....\n\n");
if(ack.equals(String.valueOf(sequence))){
i++;
System.out.println("receiver > "+" packet recieved\n\n");
}
else{
System.out.println("Time out resending data....\n\n");
sequence=(sequence==0)?1:0;

}
}catch(Exception e){}
}while(i<n+1);
System.out.println("All data sent. exiting.");
}catch(Exception e){}
finally{
try{
in.close();
out.close();
sender.close();
}
catch(Exception e){}
}
}
public static void main(String args[]){
Sender s=new Sender();
s.run();
}
}

=================================================================================================================




=====================================================================================================


7 a)udp_linux_socket

server:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int sockfd;
    char buffer[MAX_BUFFER_SIZE];
    struct sockaddr_in servaddr;

    // Create a UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Fill server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(PORT);
    servaddr.sin_addr.s_addr = INADDR_ANY;

    int n;
    socklen_t len;
    printf("Enter message to send to server: ");
    fgets(buffer, MAX_BUFFER_SIZE, stdin);

    // Send message to server
    sendto(sockfd, (const char *)buffer, strlen(buffer), MSG_CONFIRM, (const struct sockaddr *)&servaddr, sizeof(servaddr));
    printf("Message sent to server.\n");

    // Receive message from server
    n = recvfrom(sockfd, (char *)buffer, MAX_BUFFER_SIZE, MSG_WAITALL, (struct sockaddr *)&servaddr, &len);
    buffer[n] = '\0';
    printf("Message from server: %s\n", buffer);

    close(sockfd);
    return 0;
}


client:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int sockfd;
    char buffer[MAX_BUFFER_SIZE];
    struct sockaddr_in servaddr, cliaddr;

    // Create a UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    // Fill server information
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    int len, n;
    len = sizeof(cliaddr);

    // Receive message from client
    n = recvfrom(sockfd, (char *)buffer, MAX_BUFFER_SIZE, MSG_WAITALL, (struct sockaddr *)&cliaddr, &len);
    buffer[n] = '\0';
    printf("Message from client: %s\n", buffer);

    // Process received message (if needed)
    // Here we're simply echoing the message back to the client

    // Send message back to client
    sendto(sockfd, (const char *)buffer, strlen(buffer), MSG_CONFIRM, (const struct sockaddr *)&cliaddr, len);
    printf("Message sent to client.\n");

    close(sockfd);
    return 0;
}


======================================================================================================================

Exp 8

socket

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class Client {
    public static void main(String args[]) throws Exception {
        Socket soc;
        BufferedImage img = null;
        soc = new Socket("localhost", 4000);
        System.out.println("Client is running.");

        try {
            System.out.println("Reading image from disk.");
img = ImageIO.read(new File("C:\\drive\\image1_0.jpg"));
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            byte[] bytes = baos.toByteArray();
            baos.close();
            System.out.println("Sending image to server.");

            OutputStream out = soc.getOutputStream();
            DataOutputStream dos = new DataOutputStream(out);
            dos.writeInt(bytes.length);
            dos.write(bytes, 0, bytes.length);
            System.out.println("Image sent to server.");

            // Receive response from server (optional)
            InputStream in = soc.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String response = br.readLine();
            System.out.println("Server response: " + response);

            dos.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            soc.close();
        }
    }
}


import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class Server {
    public static void main(String args[]) throws Exception {
        ServerSocket server = null;
        Socket socket;
        server = new ServerSocket(4000);
        System.out.println("Server Waiting for image");

        while (true) {
            socket = server.accept();
            System.out.println("Client connected.");

            // Receive image from client
            InputStream in = socket.getInputStream();
            DataInputStream dis = new DataInputStream(in);
            int len = dis.readInt();
            System.out.println("Image Size: " + len / 1024 + "KB");
            byte[] data = new byte[len];
            dis.readFully(data);

            // Convert byte array to image
            ByteArrayInputStream ian = new ByteArrayInputStream(data);
            BufferedImage bImage = ImageIO.read(ian);

            // Display image in a JFrame (optional)
            JFrame f = new JFrame("Server");
            ImageIcon icon = new ImageIcon(bImage);
            JLabel label = new JLabel(icon);
            f.add(label);
            f.pack();
            f.setVisible(true);

            // Send response to client (optional)
            OutputStream out = socket.getOutputStream();
            PrintWriter pw = new PrintWriter(out, true);
            pw.println("Image received successfully.");

            out.close();
            dis.close();
            in.close();
            socket.close();
        }
    }
}

========================================================================================================================

10))subnet

import java.util.Scanner;
class subnet{
public static void main(String args[]){
Scanner sc = new Scanner(System.in);
System.out.print("Ip address: ");
String ip = sc.nextLine();
String split_ip[] = ip.split("\\."); //SPlit the string after every .
String split_bip[] = new String[4]; //split binary ip
String bip = "";
for(int i=0;i<4;i++){
split_bip[i] = appendZeros(Integer.toBinaryString(Integer.parseInt(split_ip[i])));
bip += split_bip[i];
}
System.out.println("Binary Format "+bip);
System.out.print("Enter the number of addresses in each subnet: ");
int n = sc.nextInt();

//Calculation of mask
int bits = (int)Math.ceil(Math.log(n)/Math.log(2));
int mask = 32-bits;
System.out.println("Subnet mask = "+mask);

//Calculation of first address and last address
int fbip[] = new int[32];
for(int i=0; i<32;i++) fbip[i] = (int)bip.charAt(i)-48; //convert cahracter 0,1 to integer 0,1
for(int i=31;i>31-bits;i--)//Get first address by ANDing last n bits with 0
fbip[i] &= 0;
String fip[] = {"","","",""};
for(int i=0;i<32;i++)
fip[i/8] = new String(fip[i/8]+fbip[i]);
System.out.print("Network address is = ");
for(int i=0;i<4;i++){
System.out.print(Integer.parseInt(fip[i],2));
if(i!=3) System.out.print(".");
}
System.out.println();

int lbip[] = new int[32];
for(int i=0; i<32;i++) lbip[i] = (int)bip.charAt(i)-48; //convert cahracter 0,1 to integer 0,1
for(int i=31;i>31-bits;i--)//Get last address by ORing last n bits with 1
lbip[i] |= 1;
String lip[] = {"","","",""};
for(int i=0;i<32;i++)
lip[i/8] = new String(lip[i/8]+lbip[i]);
System.out.print("Broadcast address is = ");
for(int i=0;i<4;i++){
System.out.print(Integer.parseInt(lip[i],2));
if(i!=3) System.out.print(".");
}
System.out.println();
}
static String appendZeros(String s){
String temp = new String("00000000");
return temp.substring(s.length())+ s;
}
}

============================================================================================================================


======================================================================================================================

7)tcp_udp


client:

import java.io.*;
import java.net.*;

public class Client {
    private static final int PORT = 8080;
    private static final String SERVER_IP = "127.0.0.1";
    private static final int MAX_BUFFER_SIZE = 1024;

    public static void main(String[] args) {
        try {
            Socket socket = new Socket(SERVER_IP, PORT);
            System.out.println("Connected to server: " + SERVER_IP + ":" + PORT);

            BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("Enter a message to send to the server: ");
            String message = userInput.readLine();

            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            out.println(message);
            System.out.println("Message sent to the server.");

            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



server:

import java.io.*;
import java.net.*;

public class Server {
    private static final int PORT = 8080;
    private static final int MAX_BUFFER_SIZE = 1024;

    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started. Listening on port " + PORT);

            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected: " + clientSocket.getInetAddress().getHostAddress());

            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String message = in.readLine();
            System.out.println("Received message from client: " + message);

            clientSocket.close();
            serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


=====================================================================================================================





